#Importing modules
import pandas as pd
import seaborn as sns
import numpy as np

#Assignment: 1. Predict stock market price for TESLA. 
#Make a prediction algorithm which predicts the price of this stock on a specific date. 
#Input will be date and output should be price of that stock. 
#Also show the prediction percentage score. 
data = pd.read_csv("/Users/havad/Downloads/TSLA.csv")
data.head()
Date	Open	High	Low	Close	Adj Close	Volume
0	2020-10-26	411.630005	425.760010	410.000000	420.279999	420.279999	28239200
1	2020-10-27	423.760010	430.500000	420.100006	424.679993	424.679993	22686500
2	2020-10-28	416.480011	418.600006	406.000000	406.019989	406.019989	25451400
3	2020-10-29	409.959991	418.059998	406.459991	410.829987	410.829987	22655300
4	2020-10-30	406.899994	407.589996	379.109985	388.040009	388.040009	42511300
data.tail()
Date	Open	High	Low	Close	Adj Close	Volume
247	2021-10-19	877.530029	877.950012	862.510010	864.270020	864.270020	17381100
248	2021-10-20	865.349976	869.489990	857.380005	865.799988	865.799988	14032100
249	2021-10-21	856.000000	900.000000	855.500000	894.000000	894.000000	31481500
250	2021-10-22	895.500000	910.000000	890.960022	909.679993	909.679993	22836800
251	2021-10-25	950.530029	1045.000000	944.200012	1026.579956	1026.579956	58206989
data.columns
Index(['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume'], dtype='object')
data.shape
(252, 7)
data.describe()
Open	High	Low	Close	Adj Close	Volume
count	252.000000	252.000000	252.000000	252.000000	252.000000	2.520000e+02
mean	680.720755	694.172697	666.763651	681.665157	681.665157	3.055864e+07
std	110.044348	111.670436	109.854865	111.301925	111.301925	1.855110e+07
min	394.000000	406.980011	379.109985	388.040009	388.040009	9.800600e+06
25%	620.212494	633.474991	604.512497	623.610016	623.610016	1.979450e+07
50%	683.384979	696.160004	668.600006	680.040008	680.040008	2.637430e+07
75%	743.207489	757.194992	733.087494	744.212494	744.212494	3.559498e+07
max	950.530029	1045.000000	944.200012	1026.579956	1026.579956	2.221262e+08
data.isnull().sum()
Date         0
Open         0
High         0
Low          0
Close        0
Adj Close    0
Volume       0
dtype: int64
data.head()
Date	Open	High	Low	Close	Adj Close	Volume
0	2020-10-26	411.630005	425.760010	410.000000	420.279999	420.279999	28239200
1	2020-10-27	423.760010	430.500000	420.100006	424.679993	424.679993	22686500
2	2020-10-28	416.480011	418.600006	406.000000	406.019989	406.019989	25451400
3	2020-10-29	409.959991	418.059998	406.459991	410.829987	410.829987	22655300
4	2020-10-30	406.899994	407.589996	379.109985	388.040009	388.040009	42511300
sns.relplot(x='Date', y='Open', data=data)
<seaborn.axisgrid.FacetGrid at 0x7fa6fb6fe520>

sns.relplot(x='Date', y='Volume', data=data)
<seaborn.axisgrid.FacetGrid at 0x7fa6fba2cd60>

#Model
data.head()
Date	Open	High	Low	Close	Adj Close	Volume
0	2020-10-26	411.630005	425.760010	410.000000	420.279999	420.279999	28239200
1	2020-10-27	423.760010	430.500000	420.100006	424.679993	424.679993	22686500
2	2020-10-28	416.480011	418.600006	406.000000	406.019989	406.019989	25451400
3	2020-10-29	409.959991	418.059998	406.459991	410.829987	410.829987	22655300
4	2020-10-30	406.899994	407.589996	379.109985	388.040009	388.040009	42511300
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
train = data.drop(['Adj Close','Volume'], axis=1)
test = data['Date']
X_train, X_test, y_train, y_test = train_test_split(train, test, test_size=0.3, random_state=2)
regr = LinearRegression()
 
 
